"""
Builds an instance of the mod in your addon folder
"""

import os
import shutil
import winreg

ROOT: str = os.getcwd()
BUILD_FOLDER: str = os.path.join(ROOT, "Build")


def get_addon_path() -> str:
    try:
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, "SOFTWARE\\WOW6432Node\\Valve\\Steam")
        value, type = winreg.QueryValueEx(key, "InstallPath")
        addon_path = os.path.join(value, "steamapps", "common", "Battlezone 98 Redux", "addon")

        if not os.path.exists(addon_path):
            raise RuntimeError("Couldn't find steam directory, do you have steam installed?")
        
    except Exception as e:
        print(f"An error occured: {e}")

    return addon_path


def set_local_dll_path(reloaded_path) -> None:
    lua_code1 = rf'package.path = package.path .. ";{rf"{reloaded_path}"}\?.lua"'.replace('\\', '\\\\')
    lua_code2 = rf'package.cpath = package.cpath .. ";{rf"{reloaded_path}"}\?.dll"'.replace('\\', '\\\\')
    
    reloaded = os.path.join(reloaded_path, "reloaded.lua")
    with open(reloaded, 'r+') as f:
        lines = f.readlines()
        f.seek(0)
        f.truncate()

        for line in lines:
            f.write(line)
            if line.strip() == 'RequireFix.Initialize("3522264415")':
                f.write('\n')
                f.write("-- Code generated by addon build script, sets local module search path\n")
                f.write(lua_code1 + '\n')
                f.write(lua_code2 + '\n')


def build_addon() -> None:
    if not os.path.exists(BUILD_FOLDER):
        raise FileNotFoundError("Couldn't find workshop build folder, make sure to run squish first")

    addon_path: str = get_addon_path()
    reloaded_path = os.path.join(addon_path, "reloaded")
    if os.path.exists(reloaded_path):
        option: str = input("Warning: folder already exists, do you want to overwrite? [y/n]" )
        if option.lower() != 'y':
            print("Cancelling build")
            return
        else:
            print("Building addon")

    if os.path.exists(reloaded_path):
        shutil.rmtree(reloaded_path)
    
    os.mkdir(reloaded_path)

    for path, _, files in os.walk(BUILD_FOLDER):
        for file in files:
            shutil.copyfile(os.path.join(path, file), os.path.join(reloaded_path, file))

    set_local_dll_path(reloaded_path)
    print(f"Built addon at {reloaded_path}")
    os.system("pause")


if __name__ == "__main__":
    try:
        build_addon()
    except Exception as e:
        print(f"An error occurred: {e}")
        os.system("pause")