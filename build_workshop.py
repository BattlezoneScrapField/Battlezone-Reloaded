"""
Builds an instance of the mod locally in the workshop folder
mainly for network testing, does NOT upload the build to the workshop
"""

import os
import shutil
import winreg

ROOT: str = os.getcwd()
BUILD_FOLDER: str = os.path.join(ROOT, "Build")


def get_workshop_path() -> str:
    try:
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, "SOFTWARE\\WOW6432Node\\Valve\\Steam")
        value, type = winreg.QueryValueEx(key, "InstallPath")
        workshop_path = os.path.join(value, "steamapps", "workshop", "content", "301650")

        if not os.path.exists(workshop_path):
            raise RuntimeError("Couldn't find steam directory, do you have steam installed?")
        
    except Exception as e:
        print(f"An error occured: {e}")

    return workshop_path


def set_local_dll_path(reloaded_path) -> None:
    reloaded = os.path.join(reloaded_path, "reloaded.lua")
    with open(reloaded, 'r+') as f:
        lines = f.readlines()
        f.seek(0)
        f.truncate()

        for line in lines:
            f.write(line)
            if line.strip() == 'RequireFix.Initialize("3522264415")':
                f.write('\n')
                f.write("-- Code generated by workshop build script, sets local module search path\n")
                f.write('RequireFix.Initialize("reloaded")\n')


def build_workshop() -> None:
    if not os.path.exists(BUILD_FOLDER):
        raise FileNotFoundError("Couldn't find workshop build folder, make sure to run squish first")

    workshop_path: str = get_workshop_path()
    reloaded_path = os.path.join(workshop_path, "reloaded")

    if os.path.exists(reloaded_path):
        shutil.rmtree(reloaded_path)
    
    os.mkdir(reloaded_path)

    for path, _, files in os.walk(BUILD_FOLDER):
        for file in files:
            shutil.copyfile(os.path.join(path, file), os.path.join(reloaded_path, file))

    set_local_dll_path(reloaded_path)
    print(f"Built workshop at {reloaded_path}")


if __name__ == "__main__":
    try:
        build_workshop()
    except Exception as e:
        print(f"An error occurred: {e}")
